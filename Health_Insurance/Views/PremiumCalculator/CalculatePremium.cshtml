@{
    ViewData["Title"] = "Calculate Premium";
}

<style>
    /* Custom styles for professional aesthetics and subtle animations */

    /* General body styling for a clean, light background with aurora effect */
    body {
        /* Aurora-like background with light, ethereal shades - professional color combination */
        background: radial-gradient(at 20% 80%, rgba(150, 200, 255, 0.7) 0%, transparent 55%), /* Brighter Light Blue */
        radial-gradient(at 80% 20%, rgba(200, 180, 230, 0.7) 0%, transparent 55%), /* Subtle Lavender/Purple */
        radial-gradient(at 50% 50%, rgba(180, 255, 200, 0.7) 0%, transparent 65%); /* Brighter Light Mint Green */
        background-color: #EBF3F8; /* A slightly deeper light blue fallback */
        font-family: 'Inter', sans-serif; /* Modern and clean font */
        color: #34495E; /* Dark gray for general text for good readability */
        min-height: 100vh; /* Ensure body takes full viewport height */
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        overflow-x: hidden; /* Prevent horizontal scroll */
        position: relative; /* For background positioning */
    }

    /* Container styling for a sophisticated card-like appearance (for the form) */
    .form-container {
        background-color: rgba(255, 255, 255, 0.2); /* More translucent white for a pronounced glass effect */
        padding: 3rem; /* Increased padding for a more spacious feel */
        border-radius: 1.25rem; /* Even larger rounded corners for a softer, premium look */
        box-shadow: 0 0.75rem 2.5rem rgba(0, 0, 0, 0.1); /* Softer, deeper shadow for elegant depth */
        margin: auto; /* Center horizontally and provide vertical margin */
        backdrop-filter: blur(20px); /* Increased blur for stronger glass effect */
        -webkit-backdrop-filter: blur(20px); /* Safari support */
        border: 1px solid rgba(255, 255, 255, 0.6); /* More prominent white border for definition */
        max-width: 600px; /* Max width for the form container */
        width: 90%; /* Responsive width */
        position: relative;
        transition: box-shadow 0.3s ease-in-out, transform 0.3s ease-in-out; /* Smooth transition for uplift */
    }

        .form-container:hover {
            box-shadow: 0 1.2rem 4rem rgba(0, 0, 0, 0.15); /* More pronounced shadow on hover */
            transform: translateY(-5px); /* Slight uplift effect on hover */
        }

    /* Heading styling for prominence and clarity */
    h1 {
        color: #2C3E50; /* Deep, dark blue/charcoal for a strong heading */
        font-weight: 700; /* Bolder font for significant emphasis */
        border-bottom: 1px solid rgba(224, 230, 233, 0.5); /* Very subtle, slightly translucent bottom border */
        padding-bottom: 1rem; /* Generous space below the border */
        margin-bottom: 2rem; /* More space below the heading */
    }

    p {
        color: #34495E;
        margin-bottom: 1.5rem;
    }

    /* Form group styling */
    .form-group {
        margin-bottom: 1.5rem; /* Space between form fields */
    }

    .form-label { /* Use form-label for Bootstrap styling */
        font-weight: 600; /* Bolder labels */
        color: #34495E; /* Darker label color */
        margin-bottom: 0.5rem; /* Space between label and input */
        display: block; /* Ensure label takes full width */
    }

    .form-control {
        border-radius: 0.5rem; /* Rounded input fields */
        border: 1px solid rgba(255, 255, 255, 0.6); /* More prominent white border for inputs */
        padding: 0.75rem 1rem; /* Comfortable padding */
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05); /* Inner shadow for depth */
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
        background-color: rgba(255, 255, 255, 0.15); /* Translucent white background for inputs */
        backdrop-filter: blur(10px); /* Apply blur to the input itself */
        -webkit-backdrop-filter: blur(10px); /* Safari support */
        color: #34495E; /* Ensure text color is readable on the translucent background */
    }

        .form-control:focus {
            border-color: rgba(255, 140, 0, 0.8); /* Orange highlight on focus */
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05), 0 0 0 0.2rem rgba(255, 140, 0, 0.25); /* Subtle orange focus ring */
            outline: none; /* Remove default outline */
        }

    /* Button styling for a modern, interactive feel */
    .btn {
        border-radius: 0.6rem; /* Rounded corners for individual buttons */
        padding: 0.75rem 1.5rem; /* Larger padding for the main button */
        font-weight: 500; /* Medium font weight for text */
        text-transform: uppercase; /* Uppercase text for a professional touch */
        box-shadow: 0 0.25rem 0.6rem rgba(0, 0, 0, 0.1); /* Subtle shadow for buttons */
        font-size: 0.85rem; /* Larger font size for the main button */
        position: relative; /* Needed for pseudo-element positioning */
        overflow: hidden; /* To clip the pseudo-element */
        z-index: 1; /* Ensure text is above pseudo-element */
        transition: color 0.3s ease, transform 0.3s cubic-bezier(0.25, 0.8, 0.25, 1), box-shadow 0.3s ease; /* Only text color transition */
        background-color: transparent; /* Start with transparent background */
    }

        /* Pseudo-element for the water spilling effect */
        .btn::before { /* Apply to all buttons with .btn */
            content: '';
            position: absolute;
            bottom: 0; /* Start from the bottom */
            left: 0;
            width: 100%;
            height: 100%;
            border-radius: 0.6rem; /* Match button border-radius */
            z-index: -1; /* Behind the button text */
            transform: scaleY(0); /* Start hidden at the bottom */
            transform-origin: bottom; /* Animate from bottom up */
            transition: transform 0.3s ease-out; /* Animation for the fill */
        }

        .btn:hover::before {
            transform: scaleY(1); /* Fill up on hover */
        }

        .btn:hover {
            transform: translateY(-2px); /* Slight lift on hover */
            box-shadow: 0 0.4rem 0.8rem rgba(0, 0, 0, 0.15); /* More pronounced shadow on hover */
            color: white; /* Text turns white on hover */
        }

    /* Specific button color adjustments for a palette */
    .btn-primary { /* Used for "Calculate Premium" button */
        border: 1px solid #FF8C00; /* Dark Orange outline */
        color: #FF8C00; /* Dark Orange text color matches outline */
    }

        .btn-primary::before {
            background-color: #E67E22; /* Deeper Orange fill color for primary button on hover */
        }

        .btn-primary:hover {
            border-color: #E67E22; /* Deeper Orange outline on hover */
        }

    /* Ensure no blue outlines or shadows on button focus/active states */
    .btn:focus {
        outline: none; /* Remove default browser outline */
        box-shadow: 0 0 0 0.25rem rgba(255, 140, 0, 0.4); /* Custom orange focus ring */
    }

        .btn:focus:hover { /* When focused and hovered, combine hover and focus shadows */
            box-shadow: 0 0.4rem 0.8rem rgba(0, 0, 0, 0.15), 0 0 0 0.25rem rgba(255, 140, 0, 0.4);
        }

    .btn:active {
        transform: translateY(0); /* Prevent further lift on active click */
        box-shadow: 0 0.25rem 0.6rem rgba(0, 0, 0, 0.1); /* Keep subtle shadow on active */
        color: white; /* Text white on active */
        background-color: #E67E22; /* Solid orange background on active */
        border-color: #E67E22; /* Orange border on active */
    }

        .btn:active::before { /* Ensure the fill is active on click */
            transform: scaleY(1);
        }

    /* Alert messages styling */
    .alert {
        border-radius: 0.6rem; /* Rounded corners for the alert box */
        font-weight: 500; /* Medium font weight */
        padding: 1rem 1.5rem; /* More padding for alerts */
        margin-top: 1.5rem; /* Space from form */
    }

    .alert-success {
        background-color: #D4EDDA; /* Light green background for success */
        color: #155724; /* Dark green text for success */
        border-color: #C3E6CB; /* Green border for success */
    }

    .alert-danger {
        background-color: #F8D7DA; /* Light red background for danger */
        color: #721C24; /* Dark red text for danger */
        border-color: #F5C6CB; /* Red border for danger */
    }
</style>

<div class="form-container">
    <h1 class="mb-4">Calculate Premium</h1>

    <p>Enter Employee and Policy details to calculate the premium.</p>

    @* Form for manual input of Employee ID and Policy ID - submitted via AJAX *@
    <form id="premiumCalculationForm" asp-controller="PremiumCalculator" asp-action="CalculatePremium" method="post">
        @* Add a hidden field for CSRF protection if needed for form posts *@
        @* @Html.AntiForgeryToken() *@

        @* Input fields with Bootstrap form-group and form-control *@
        <div class="form-group mb-3">
            @* Added margin-bottom *@
            <label for="employeeId" class="form-label">Employee ID:</label> @* Use form-label for Bootstrap styling *@
            @* Input field for Employee ID. Name attribute is important for model binding. *@
            <input type="number" id="employeeId" name="employeeId" class="form-control" required />
        </div>
        <div class="form-group mb-3">
            @* Added margin-bottom *@
            <label for="policyId" class="form-label">Policy ID:</label> @* Use form-label for Bootstrap styling *@
            @* Input field for Policy ID. Name attribute is important for model binding. *@
            <input type="number" id="policyId" name="policyId" class="form-control" required />
        </div>
        <button type="submit" class="btn btn-primary mt-3">Calculate Premium</button> @* Added margin-top to button, use Bootstrap button class *@
    </form>

    @* Display area for the calculated premium - updated by AJAX JavaScript *@
    @* Use Bootstrap alert classes and initially hide *@
    <div id="premiumResult" class="alert alert-success mt-3" style="display: none;">
        <strong>Calculated Premium:</strong> <span id="calculatedPremiumAmount"></span>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    @* Add jQuery library if not already included in your layout file *@
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

    <script>
        $(document).ready(function () {
            // Get a reference to the form
            var premiumForm = $('#premiumCalculationForm');
            // Get references to the result display area and the span for the amount
            var premiumResultDiv = $('#premiumResult');
            var calculatedPremiumSpan = $('#calculatedPremiumAmount');

            // Attach a submit event handler to the form
            premiumForm.submit(function (event) {
                // Prevent the default form submission (which would cause a page reload)
                event.preventDefault();

                // Get the values from the input fields
                var employeeId = $('#employeeId').val();
                var policyId = $('#policyId').val();

                // Basic validation (optional, server-side validation is also important)
                if (!employeeId || !policyId) {
                    // Use Bootstrap alert styling for simple client-side validation message
                    premiumResultDiv.removeClass('alert-success').addClass('alert-danger').text('Please enter both Employee ID and Policy ID.').show();
                    return; // Stop the function if validation fails
                }

                // Hide previous results and clear the amount
                premiumResultDiv.hide().removeClass('alert-success alert-danger').text(''); // Clear text and classes
                calculatedPremiumSpan.text(''); // Clear the specific amount span

                // Perform the AJAX POST request
                $.ajax({
                    url: premiumForm.attr('action'), // Get the URL from the form's asp-action and asp-controller
                    type: premiumForm.attr('method'), // Get the method from the form (should be POST)
                    data: { employeeId: employeeId, policyId: policyId }, // Data to send to the controller
                    // If you are using [ValidateAntiForgeryToken], you would need to include the token here
                    // headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                    success: function (response) {
                        // This function is called if the AJAX request is successful
                        if (response && response.premium !== undefined) {
                            // Display the calculated premium
                            calculatedPremiumSpan.text('$' + response.premium.toFixed(2)); // Format to 2 decimal places
                            premiumResultDiv.removeClass('alert-danger').addClass('alert-success').show(); // Show success alert
                        } else {
                            // Handle unexpected response format
                            premiumResultDiv.removeClass('alert-success').addClass('alert-danger').text('Could not calculate premium.'); // Show error alert directly in the div
                        }
                    },
                    error: function (xhr, status, error) {
                        // This function is called if the AJAX request fails
                        console.error("AJAX Error:", status, error);
                        premiumResultDiv.removeClass('alert-success').addClass('alert-danger').text('Error calculating premium. Please try again.'); // Show error alert directly in the div
                    }
                });
            });
        });
    </script>
}
